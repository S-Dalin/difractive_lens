"""
calc Efficiency of a lens - torchgdm&torchdiffract

A. Az√©ma, 07/2025
"""

# %%
import torchdiffract

import torchgdm as tg
import torch
import numpy as np

import matplotlib.pyplot as plt

z0_metasurface = 0

N_particles = 15
wavelengths = torch.tensor([700.0])

D_area = 1.2 * wavelengths[0] * N_particles
z_focus = -D_area

calc_zone = wavelengths[
    0
]  # We are going to calculate the mean of the efficiency around the focal point (wl x wl zone)
shape = 121 * 4

# pos_part_ is the x and y positions of the particules ( result of your optimisation )
pos_part_ = torch.tensor(
    [
        [-6074.3071, -6106.0029],
        [-5659.2930, -6522.8745],
        [-4368.5742, -6063.8618],
        [-3718.0566, -6343.2349],
        [-2965.9858, -6539.9736],
        [-2014.8329, -6154.5957],
        [-677.0568, -5971.1724],
        [-17.5877, -6015.8838],
        [694.4705, -5961.5005],
        [1754.3010, -5879.0493],
        [2877.0793, -6506.9204],
        [3684.1350, -6355.0210],
        [4399.8232, -6071.1152],
        [5641.6294, -6515.1094],
        [6039.1270, -6097.2666],
        [-6409.7524, -5611.5112],
        [-5265.3550, -5159.6016],
        [-4690.0254, -5593.7402],
        [-3593.9531, -5232.6064],
        [-2540.7305, -5153.9893],
        [-1818.6621, -5284.3428],
        [-1066.6107, -5506.7764],
        [-297.7782, -5525.2271],
        [1032.5706, -5461.1230],
        [1931.3503, -5436.0371],
        [2669.2415, -5165.6616],
        [3712.5320, -5293.2271],
        [4649.2705, -5547.9668],
        [5245.2305, -5145.3979],
        [6411.3374, -5630.3110],
        [-5951.3120, -4161.9316],
        [-5524.0103, -4604.5698],
        [-4211.5522, -4223.0078],
        [-3495.2419, -4318.1411],
        [-2827.7678, -4620.0962],
        [-2111.8113, -4739.1133],
        [-677.3219, -4258.0288],
        [13.8359, -4166.2886],
        [673.6320, -4210.6016],
        [2084.8027, -4350.2275],
        [2929.8279, -4602.1562],
        [3673.9062, -4380.1924],
        [4223.1978, -4172.5693],
        [5544.8228, -4616.7852],
        [6010.3081, -4221.1304],
        [-6299.1885, -3606.7073],
        [-5051.2861, -3304.5483],
        [-4517.8223, -3558.0413],
        [-3847.7075, -3780.0415],
        [-2301.6628, -3302.9207],
        [-1669.0438, -3355.4504],
        [-921.2172, -3403.7266],
        [-185.5474, -3614.3933],
        [776.3481, -3414.2649],
        [1767.9341, -3418.7224],
        [2356.7402, -3197.6641],
        [3876.9829, -3731.8962],
        [4514.4775, -3559.5168],
        [5079.3579, -3389.1401],
        [6304.0933, -3595.6306],
        [-6487.9443, -3010.0320],
        [-5136.0449, -2435.9758],
        [-4806.7378, -2947.6846],
        [-3390.5120, -2663.3931],
        [-2557.0464, -2338.3657],
        [-1997.2925, -2819.2505],
        [-1086.9113, -2818.0291],
        [-376.1895, -3006.9529],
        [769.8914, -2750.8862],
        [1936.6019, -2811.2124],
        [2632.8440, -2694.3481],
        [3161.4629, -2477.3164],
        [4882.9585, -2941.0718],
        [5175.9805, -2421.5979],
        [6499.3003, -3010.2920],
        [-5932.2339, -1745.3160],
        [-5401.1309, -1883.9456],
        [-3995.2996, -1711.1377],
        [-3490.7498, -1578.9236],
        [-2804.0620, -1766.9984],
        [-2125.3818, -1885.1469],
        [-724.5215, -1973.3954],
        [255.3952, -1352.3501],
        [715.8044, -2018.9343],
        [2174.8176, -2239.3447],
        [2837.0483, -1716.5535],
        [3469.3477, -1576.1577],
        [3942.1982, -1752.8776],
        [5424.3623, -1870.8982],
        [5954.3887, -1775.0076],
        [-6015.3613, -781.4940],
        [-5545.3608, -448.2682],
        [-4102.6226, -616.1826],
        [-3720.7795, -1013.4680],
        [-3128.7026, -1144.7136],
        [-1529.9612, -1153.5773],
        [-942.3160, -989.0074],
        [273.5763, -1052.4062],
        [847.1879, -954.9131],
        [1342.4314, -847.3721],
        [3062.8086, -1124.7312],
        [3622.6301, -983.8913],
        [4116.1455, -749.2067],
        [5489.3022, -460.8898],
        [5982.4751, -751.1820],
        [-5985.6431, -176.7203],
        [-5694.9854, 285.9968],
        [-4001.9314, -254.8479],
        [-3867.4192, 296.6597],
        [-3261.5220, 372.3946],
        [-1355.1240, -103.5462],
        [-525.7089, 278.4128],
        [-375.1105, -214.2894],
        [896.1060, 200.1215],
        [1435.5764, 164.6213],
        [3257.9541, -512.5159],
        [3962.4058, 395.8159],
        [3978.9055, -230.5019],
        [5812.6045, 382.7758],
        [5917.7739, -149.6739],
        [-6102.2666, 992.6486],
        [-5659.4385, 879.5511],
        [-4092.5881, 831.8697],
        [-3532.2539, 884.3449],
        [-2988.2852, 1066.1606],
        [-1519.5710, 837.5087],
        [-518.8229, 746.9730],
        [16.5741, 922.6169],
        [461.0768, 697.8049],
        [1458.8923, 1236.7966],
        [3008.4934, 1155.2748],
        [3596.7917, 924.8939],
        [4064.3015, 950.3323],
        [5542.4302, 1014.1067],
        [6037.3740, 802.1066],
        [-5904.1182, 1794.5565],
        [-5498.7856, 1800.2946],
        [-3942.9031, 1869.5579],
        [-3413.9409, 1518.8182],
        [-2841.9990, 1857.6727],
        [-2094.8420, 2189.0933],
        [-426.9136, 1978.3781],
        [-147.0320, 1817.8280],
        [886.1298, 1898.7676],
        [2061.8765, 2186.4761],
        [2894.4453, 1912.7047],
        [3432.3445, 1531.7457],
        [3971.2520, 1580.0812],
        [5465.2417, 1771.7274],
        [5945.2007, 1872.7439],
        [-6468.2612, 2952.7759],
        [-5169.7534, 2323.8889],
        [-4905.8086, 2851.3694],
        [-3111.5168, 2544.2231],
        [-2666.8787, 2398.2908],
        [-1980.3826, 2842.1899],
        [-1114.7971, 3007.1611],
        [-259.9271, 2757.4553],
        [983.2283, 2864.5728],
        [2018.9155, 2818.7571],
        [2613.6948, 2442.0220],
        [3161.7598, 2391.2593],
        [4887.9253, 2838.1592],
        [5125.3530, 2280.5105],
        [6444.3452, 2989.4141],
        [-6309.7983, 3531.9702],
        [-5012.8975, 3413.2505],
        [-4404.4673, 3391.3157],
        [-3842.5776, 3737.5156],
        [-2365.5591, 3304.4141],
        [-1689.1873, 3390.7090],
        [-1053.6799, 3595.3123],
        [-363.9697, 3361.8184],
        [462.1171, 3305.9766],
        [1782.7231, 3409.6292],
        [2372.2878, 3259.1357],
        [3832.5107, 3777.5752],
        [4435.1436, 3439.8435],
        [5006.2515, 3402.3394],
        [6271.7847, 3588.8530],
        [-5995.1011, 4245.0151],
        [-5589.5732, 4632.5703],
        [-4193.5371, 4189.1743],
        [-3556.9114, 4332.7207],
        [-2897.1106, 4568.6978],
        [-1997.5751, 4373.4170],
        [-507.4079, 4396.9404],
        [23.5143, 4163.8198],
        [614.6729, 4139.1665],
        [2143.9036, 4846.1733],
        [2853.3638, 4647.6450],
        [3524.8250, 4354.3457],
        [4155.6479, 4236.1914],
        [5535.4951, 4597.5264],
        [5993.4893, 4225.9302],
        [-6452.3311, 5619.6377],
        [-5277.2324, 5150.4614],
        [-4628.8115, 5524.4463],
        [-3701.7151, 5262.0850],
        [-2557.3604, 5112.2710],
        [-1930.7925, 5441.6465],
        [-1125.1534, 5541.2192],
        [299.2448, 5437.3071],
        [1029.6351, 5493.3018],
        [1952.2190, 5475.1372],
        [2592.4763, 5208.4648],
        [3664.1614, 5319.8291],
        [4640.6553, 5554.3843],
        [5287.5581, 5157.8398],
        [6425.1157, 5608.8555],
        [-6107.6763, 6082.1807],
        [-5669.4883, 6493.5596],
        [-4366.4590, 6073.8608],
        [-3713.1975, 6357.0571],
        [-2919.3650, 6481.7295],
        [-1756.7090, 5882.8721],
        [-727.4317, 5970.3530],
        [29.3485, 5981.4136],
        [611.7928, 5936.2876],
        [1884.5798, 5945.2510],
        [2988.2371, 6534.5371],
        [3699.2197, 6331.1519],
        [4361.3418, 6110.2344],
        [5667.9961, 6492.5684],
        [6125.2729, 6098.8359],
    ]
)
pos_part = torch.ones((len(pos_part_), 3)) * z0_metasurface
pos_part[:, 0:2] = pos_part_[:, 0:2]

# ------------------------------------------------------------------------------------------------------------------
# Calculation of the phase distribution for a ideal lens (@ z=z position of the lens)
calc_zone_IL_pos = tg.tools.geometry.coordinate_map_2d_square(
    D_area / 2, n=shape, r3=z_focus
)["r_probe"].reshape((shape, shape, 3))
Ideal_Phase = torch.zeros((shape, shape))
for i in range(shape):
    for j in range(shape):
        Ideal_Phase[i][j] = (
            2
            * torch.pi
            * (
                torch.sqrt(
                    calc_zone_IL_pos[i][j][0] ** 2
                    + calc_zone_IL_pos[i][j][1] ** 2
                    + z_focus**2
                )
                - (-z_focus)
            )
            / (wavelengths[0])
        )

# Propagation to the focal distance
e_in = torch.as_tensor(np.exp(-1j * tg.to_np(Ideal_Phase)))
difflay = torchdiffract.layers.PropagationLayer(
    Nx=shape,
    Ny=shape,
    Dx=D_area * 10e-10,
    Dy=D_area * 10e-10,
    wl=wavelengths[0] * 10e-10,
    propag_z=(-z_focus) * 10e-10,
)  # 10e-10 because torchdiffract uses meters
E_propa = difflay(e_in)
I_Ideal_lens = np.abs(tg.to_np(E_propa)) ** 2

# When we propagate we need to give the information of the phase of our full lens
# but when we calculate the efficiency we only look at the wl x wl zone around the focal point
x_m = int(shape / 2 - calc_zone * shape / (2 * D_area))
x_p = int(shape / 2 + calc_zone * shape / (2 * D_area)) + 1
I_Ideal_lens = I_Ideal_lens[x_m:x_p, x_m:x_p]

# Plot of the Ideal lens Intensity
im = plt.imshow(
    I_Ideal_lens, extent=[-calc_zone / 2, calc_zone / 2, -calc_zone / 2, calc_zone / 2]
)
plt.title("Ideal Lens - Intensity around focal point")
plt.xlabel("x [nm]")
plt.ylabel("y [nm]")
plt.colorbar(im)
plt.show()
# ------------------------------------------------------------------------------------------------------------------

# Simulation of the optimize lens

# environment
env = tg.env.freespace_3d.EnvHomogeneous3D(env_material=1.0)

# illumination field(s)
e_inc_list = [tg.env.freespace_3d.PlaneWave(e0p=1.0, e0s=0.0, inc_angle=torch.pi)]

#  structure: Mie-theory based particle
r_core = 100.0  # nm
d_shell = 30.0  # nm
mat_core = tg.materials.MatDatabase("Au")
mat_shell = tg.materials.MatDatabase("sio2")
struct_alpha = tg.struct3d.StructMieSphereEffPola3D(
    wavelengths=wavelengths,
    radii=[r_core, r_core + d_shell],
    materials=[mat_core, mat_shell],
    environment=env,
)
# create and run simulation
sim = tg.simulation.Simulation(
    structures=[struct_alpha.copy(pos_part)],
    environment=env,
    illumination_fields=e_inc_list,
    wavelengths=[wavelengths[0]],
    device=torch.device("cuda"),
)
sim.run(verbose=False, progress_bar=False)

# To compare with the ideal lens we also calculate the field above the full lens but only keep the wl x wl zone
r_probe_xy = tg.tools.geometry.coordinate_map_2d_square(D_area / 2, n=shape, r3=z_focus)
nf_res_xy = tg.postproc.fields.nf(sim, wavelengths[0], r_probe=r_probe_xy)
I_lens = (
    nf_res_xy["tot"]
    .get_efield_intensity()
    .cpu()
    .reshape((shape, shape))[x_m:x_p, x_m:x_p]
)

im = plt.imshow(
    I_lens, extent=[-calc_zone / 2, calc_zone / 2, -calc_zone / 2, calc_zone / 2]
)
plt.title("Lens - Intensity around focal point")
plt.xlabel("x [nm]")
plt.ylabel("y [nm]")
plt.colorbar(im)
plt.show()

Eff = 100 * I_lens.mean() / I_Ideal_lens.mean()
print(f"Efficiency = {Eff} %")
# %%
